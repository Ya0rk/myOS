#import "../template.typ": img

= 硬件抽象层

== 硬件抽象层（Hardware Abstraction Layer，HAL）总览

为支持多平台运行与测试，DDD 在内核中实现了功能基本完整的硬件抽象层，可以运行于 RISC-V64 和 LoongArch64 两种指令集架构的 QEMU 平台。DDD的内核代码全部基于硬件抽象层开发，屏蔽了架构细节和平台差异，具有更好的兼容性和可移植性。

【硬件抽象层示意图】


== 处理器访问接口

// 特殊通用寄存器读写、控制状态寄存器读写、特殊指令执行
DDD 在`riscv`和`loongarch`外部库的帮助下，对 RISC-V 和 LoongArch 两种架构下的处理器访问实现了统一抽象。在内核代码中，对处理器及相关资源的访问包括以下几种类型：

- 读写通用寄存器 
- 访问控制状态寄存器
- 执行特殊的控制指令（如内核刷表指令）

在 DDD 中，这些操作只需要调用统一的接口即可完成，具体实现细节位于 HAL 中，便于构建架构无关的内核代码。

== 内核入口例程

RISC-V 和 LoongArch 架构在内核启动上的细节有所异同。LoongArch 架构启动时需要配置直接映射地址翻译模式，需要为分页地址翻译模式设置高半空间、低半空间两个页表 token ，还需要设置 TLB 重填异常入口，这些都是 RISC-V 架构下内核启动所不需要的步骤。DDD 的硬件抽象层将初始化时的架构相关部分抽象为`arch_init()`例程，供内核初始化时调用，为内核入口的规范化提供支持。
【代码，arch_init重构完毕后填写】

== 内存管理单元与地址空间

=== 物理内存

=== 分页

rv完整 la两半

=== 直接映射窗口

=== 页表

=== TLB重填

== 中断

这里好像没什么可写

== 板载设备与串口驱动

这里只写