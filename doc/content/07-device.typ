#import "../components/prelude.typ": *
= 设备

== 设备管理模块概述

设备的管理在操作系统中起到至关重要的部分。Del0n1x 对设备进行抽象和封装，确保内核对设备进行规范的管理，向其他模块提供简便易用的接口，并为拓展新的设备提供方便。

设备管理模块实现了设备的发现和初始化、驱动程序匹配与加载等功能。操作系统依赖设备管理模块与计算机系统中的硬件部分进行信息的交换，设备管理模块的设计直接影响整个系统的可用性、稳定性与性能。


Del0n1x 中，基本设备抽象为基本设备属性接口`BaseDriver trait`。块设备、tty 设备、网络设备等一切设备的实现均拓展于这个接口。例如，Del0n1x 将块设备抽象为块设备属性接口`BlockDriver trait`，这个属性继承了`BaseDevice trait`。对于一个块设备的具体实现，需要实现块设备属性接口`BlockDriver trait`， 通过这样的设计，可以对设备进行统一的管理与使用。


// #figure(
//   image("img/rCore换栈.png"),
//   caption: [rCore 上下文切换],
//   supplement: [图],
// )<rCore上下文切换>

== 设备树

操作系统通过解析设备树实现对设备的发现。Del0n1x 内核获取到设备树的地址的流程如下：

#enum(
    enum.item(1)[OpenSBI启动：当系统启动时，OpenSBI固件首先运行。它完成基础的硬件初始化，如内存控制器设置、I/O 初始化等],
    enum.item(2)[传递控制权到内核：OpenSBI初始化完成后，将控制权传递给内核的入口点，并传递必要的参数。这些参数包括：],
    indent: 2em
)
#list(
    [`hart_id`：当前硬件线程的 ID。],
    [`dtb_addr`：设备树地址，该地址指向设备树描述符（DTB），描述了系统的硬件布局和配置信息。],
    indent: 4em
)
// + OpenSBI启动：当系统启动时，OpenSBI
//   固件首先运行。它完成基础的硬件初始化，如内存控制器设置、I/O 初始化等。

// + 传递控制权到内核：OpenSBI
//   初始化完成后，将控制权传递给内核的入口点，并传递必要的参数。这些参数包括：

  // - `hart_id`：当前硬件线程的 ID。
  // - `dtb_addr`：设备树地址，该地址指向设备树描述符（DTB），描述了系统的硬件布局和配置信息。

#h(2em)对于 LoongArch QEMU virt 平台，我们通过查看 QEMU 源码确定了设备树的地址。

Del0n1x 通过 `probe` 方法，从设备树的根节点进行搜索，获得当前机器上的设备与其地址，当检测到系统支持的设备的时候就调用注册函数，使用对应的驱动程序实现内核中对该设备的抽象，形成内核中的设备实体，供给其他模块使用。通过设备树解析，我们可以实现同一份内核二进制在不同的硬件上启动。

未来我们希望完善 devtmpfs ，实现从设备到文件的抽象。


#pagebreak()  // 强制分页